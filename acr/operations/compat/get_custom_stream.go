// Code generated by go-swagger; DO NOT EDIT.

package compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCustomStreamHandlerFunc turns a function with the right signature into a get custom stream handler
type GetCustomStreamHandlerFunc func(GetCustomStreamParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCustomStreamHandlerFunc) Handle(params GetCustomStreamParams) middleware.Responder {
	return fn(params)
}

// GetCustomStreamHandler interface for that can handle valid get custom stream params
type GetCustomStreamHandler interface {
	Handle(GetCustomStreamParams) middleware.Responder
}

// NewGetCustomStream creates a new http.Handler for the get custom stream operation
func NewGetCustomStream(ctx *middleware.Context, handler GetCustomStreamHandler) *GetCustomStream {
	return &GetCustomStream{Context: ctx, Handler: handler}
}

/*GetCustomStream swagger:route GET /v1/acrcloud-monitor-streams/{streamId}/results compat getCustomStream

ACRCloud Custom Streams Full Day Endpoint

This endpoint implements the same API as upstream ACRCloud does.

*/
type GetCustomStream struct {
	Context *middleware.Context
	Handler GetCustomStreamHandler
}

func (o *GetCustomStream) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCustomStreamParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
