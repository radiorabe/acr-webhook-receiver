// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetResultsParams creates a new GetResultsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetResultsParams() *GetResultsParams {
	return &GetResultsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetResultsParamsWithTimeout creates a new GetResultsParams object
// with the ability to set a timeout on a request.
func NewGetResultsParamsWithTimeout(timeout time.Duration) *GetResultsParams {
	return &GetResultsParams{
		timeout: timeout,
	}
}

// NewGetResultsParamsWithContext creates a new GetResultsParams object
// with the ability to set a context for a request.
func NewGetResultsParamsWithContext(ctx context.Context) *GetResultsParams {
	return &GetResultsParams{
		Context: ctx,
	}
}

// NewGetResultsParamsWithHTTPClient creates a new GetResultsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetResultsParamsWithHTTPClient(client *http.Client) *GetResultsParams {
	return &GetResultsParams{
		HTTPClient: client,
	}
}

/* GetResultsParams contains all the parameters to send to the API endpoint
   for the get results operation.

   Typically these are written to a http.Request.
*/
type GetResultsParams struct {

	// XRequestID.
	XRequestID *string

	// From.
	//
	// Format: date-time
	From *strfmt.DateTime

	/* Limit.

	   The numbers of items to return.

	   Default: 20
	*/
	Limit *int64

	/* Offset.

	   The number of items to skip before starting to collect the result set.
	*/
	Offset *int64

	// To.
	//
	// Format: date-time
	To *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResultsParams) WithDefaults() *GetResultsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetResultsParams) SetDefaults() {
	var (
		limitDefault = int64(20)

		offsetDefault = int64(0)
	)

	val := GetResultsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get results params
func (o *GetResultsParams) WithTimeout(timeout time.Duration) *GetResultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get results params
func (o *GetResultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get results params
func (o *GetResultsParams) WithContext(ctx context.Context) *GetResultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get results params
func (o *GetResultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get results params
func (o *GetResultsParams) WithHTTPClient(client *http.Client) *GetResultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get results params
func (o *GetResultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the get results params
func (o *GetResultsParams) WithXRequestID(xRequestID *string) *GetResultsParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the get results params
func (o *GetResultsParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithFrom adds the from to the get results params
func (o *GetResultsParams) WithFrom(from *strfmt.DateTime) *GetResultsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get results params
func (o *GetResultsParams) SetFrom(from *strfmt.DateTime) {
	o.From = from
}

// WithLimit adds the limit to the get results params
func (o *GetResultsParams) WithLimit(limit *int64) *GetResultsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get results params
func (o *GetResultsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get results params
func (o *GetResultsParams) WithOffset(offset *int64) *GetResultsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get results params
func (o *GetResultsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithTo adds the to to the get results params
func (o *GetResultsParams) WithTo(to *strfmt.DateTime) *GetResultsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get results params
func (o *GetResultsParams) SetTo(to *strfmt.DateTime) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetResultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-ID
		if err := r.SetHeaderParam("X-Request-ID", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom strfmt.DateTime

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo strfmt.DateTime

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
