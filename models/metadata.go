// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Metadata metadata
//
// swagger:model Metadata
type Metadata struct {

	// music
	Music []*Music `json:"music"`

	// played duration
	// Required: true
	PlayedDuration *int64 `json:"played_duration"`

	// timestamp utc
	// Required: true
	TimestampUtc *string `json:"timestamp_utc"`
}

// Validate validates this metadata
func (m *Metadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMusic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayedDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestampUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metadata) validateMusic(formats strfmt.Registry) error {

	if swag.IsZero(m.Music) { // not required
		return nil
	}

	for i := 0; i < len(m.Music); i++ {
		if swag.IsZero(m.Music[i]) { // not required
			continue
		}

		if m.Music[i] != nil {
			if err := m.Music[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("music" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Metadata) validatePlayedDuration(formats strfmt.Registry) error {

	if err := validate.Required("played_duration", "body", m.PlayedDuration); err != nil {
		return err
	}

	return nil
}

func (m *Metadata) validateTimestampUtc(formats strfmt.Registry) error {

	if err := validate.Required("timestamp_utc", "body", m.TimestampUtc); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Metadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metadata) UnmarshalBinary(b []byte) error {
	var res Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
